const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_URL = 'http://localhost:3264';
const MAX_CHAT_AGE_DAYS = 7; // –£–¥–∞–ª—è—Ç—å —á–∞—Ç—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
const MAX_CHATS_PER_USER = 5; // –ú–∞–∫—Å–∏–º—É–º 5 —á–∞—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

class ChatCleanup {
  constructor() {
    this.client = axios.create({
      baseURL: API_URL,
      timeout: 30000
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
   */
  async getAllChats() {
    try {
      const response = await this.client.get('/api/chats');
      return {
        success: true,
        data: response.data
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
   */
  async deleteChat(chatId) {
    try {
      await this.client.delete(`/api/chats/${chatId}`);
      return {
        success: true
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–æ–≤
   */
  async autoCleanup() {
    console.log('üßπ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —á–∞—Ç–æ–≤...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã
    const chatsResult = await this.getAllChats();
    if (!chatsResult.success) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:', chatsResult.error);
      return;
    }

    const chats = chatsResult.data;
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${chats.length} —á–∞—Ç–æ–≤`);

    const now = Date.now();
    const maxAgeMs = MAX_CHAT_AGE_DAYS * 24 * 60 * 60 * 1000;
    let deletedCount = 0;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const userChats = {};
    chats.forEach(chat => {
      const match = chat.name.match(/User_(\d+)_Comments/);
      if (match) {
        const userId = match[1];
        if (!userChats[userId]) {
          userChats[userId] = [];
        }
        userChats[userId].push(chat);
      }
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const [userId, userChatList] of Object.entries(userChats)) {
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: ${userChatList.length} —á–∞—Ç–æ–≤`);

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
      userChatList.sort((a, b) => {
        const timeA = new Date(a.createdAt || a.updatedAt || 0).getTime();
        const timeB = new Date(b.createdAt || b.updatedAt || 0).getTime();
        return timeB - timeA;
      });

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —á–∞—Ç—ã
      for (let i = 0; i < userChatList.length; i++) {
        const chat = userChatList[i];
        const chatTime = new Date(chat.createdAt || chat.updatedAt || 0).getTime();
        const chatAge = now - chatTime;

        // –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —á–∞—Ç —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π –∏–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        if (chatAge > maxAgeMs || i >= MAX_CHATS_PER_USER) {
          console.log(`üóëÔ∏è –£–¥–∞–ª—è—é —á–∞—Ç ${chat.chatId} (–≤–æ–∑—Ä–∞—Å—Ç: ${Math.round(chatAge / (24 * 60 * 60 * 1000))} –¥–Ω–µ–π)`);
          
          const deleteResult = await this.deleteChat(chat.chatId);
          if (deleteResult.success) {
            deletedCount++;
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ ${chat.chatId}:`, deleteResult.error);
          }
        }
      }
    }

    console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ ${deletedCount} —á–∞—Ç–æ–≤.`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  async getStats() {
    const chatsResult = await this.getAllChats();
    if (!chatsResult.success) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', chatsResult.error);
      return;
    }

    const chats = chatsResult.data;
    const userChats = {};
    
    chats.forEach(chat => {
      const match = chat.name.match(/User_(\d+)_Comments/);
      if (match) {
        const userId = match[1];
        if (!userChats[userId]) {
          userChats[userId] = [];
        }
        userChats[userId].push(chat);
      }
    });

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤:');
    console.log(`–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: ${chats.length}`);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${Object.keys(userChats).length}`);
    
    for (const [userId, userChatList] of Object.entries(userChats)) {
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: ${userChatList.length} —á–∞—Ç–æ–≤`);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const cleanup = new ChatCleanup();
  
  const command = process.argv[2];
  
  switch (command) {
    case 'cleanup':
      await cleanup.autoCleanup();
      break;
    case 'stats':
      await cleanup.getStats();
      break;
    default:
      console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
      console.log('  node cleanup-chats.js cleanup  - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —á–∞—Ç—ã');
      console.log('  node cleanup-chats.js stats    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
      break;
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch(console.error);
}

module.exports = ChatCleanup;
