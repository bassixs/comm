const TelegramBot = require('node-telegram-bot-api');
const config = require('../utils/config');
const QwenApi = require('./qwenApi');
const ChatManager = require('../managers/chatManager');
const LearningManager = require('../managers/learningManager');
const Utils = require('../utils/utils');

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram –±–æ—Ç–∞
 * 
 * @class TelegramBotHandler
 * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ Telegram API,
 * —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å Qwen API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
 * 
 * @example
 * const bot = new TelegramBotHandler();
 * bot.start();
 * 
 * @property {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 * @property {QwenApi} qwenApi - API –∫–ª–∏–µ–Ω—Ç –¥–ª—è Qwen
 * @property {ChatManager} chatManager - –ú–µ–Ω–µ–¥–∂–µ—Ä —á–∞—Ç–æ–≤
 * @property {Map} userStates - –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
class TelegramBotHandler {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramBotHandler
   * 
   * @constructor
   * @description –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ polling –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
   */
  constructor() {
    this.bot = new TelegramBot(config.telegram.token, { 
      polling: true,
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      polling_options: {
        timeout: 10,
        limit: 100,
        retryTimeout: 5000
      }
    });
    this.qwenApi = new QwenApi();
    this.chatManager = new ChatManager();
    this.learningManager = new LearningManager();
    this.userStates = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    this.setupHandlers();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
   * 
   * @method init
   * @description –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
   */
  async init() {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
      await this.chatManager.init();
      await this.learningManager.init();
      
      Utils.log('info', 'TelegramBotHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      Utils.log('error', '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TelegramBotHandler', error);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   * 
   * @method setupHandlers
   * @description –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   * –í–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥, —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—à–∏–±–æ–∫
   * 
   * @private
   */
  setupHandlers() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    this.bot.onText(/\/start/, this.handleStart.bind(this));
    this.bot.onText(/\/help/, this.handleHelp.bind(this));
    this.bot.onText(/\/generate/, this.handleGenerate.bind(this));
    this.bot.onText(/\/status/, this.handleStatus.bind(this));
    this.bot.onText(/\/learning/, this.handleLearning.bind(this));
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏
    this.bot.onText(/\/models/, this.handleModels.bind(this));
    this.bot.onText(/\/setmodel/, this.handleSetModel.bind(this));
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏
    this.bot.onText(/\/chats/, this.handleChats.bind(this));
    this.bot.onText(/\/newchat/, this.handleNewChat.bind(this));
    this.bot.onText(/\/selectchat/, this.handleSelectChat.bind(this));
    this.bot.onText(/\/renamechat/, this.handleRenameChat.bind(this));
    this.bot.onText(/\/deletechat/, this.handleDeleteChat.bind(this));
    this.bot.onText(/\/clear/, this.handleClear.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', this.handleMessage.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
    this.bot.on('callback_query', this.handleCallbackQuery.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    this.bot.on('polling_error', (error) => {
      console.error('–û—à–∏–±–∫–∞ polling:', error);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
      if (error.code === 'EFATAL') {
        console.error('–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ polling - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...');
        setTimeout(() => {
          this.restartPolling();
        }, 10000);
      } else if (error.code === 'ECONNRESET' || error.message.includes('ECONNRESET')) {
        console.error('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
        setTimeout(() => {
          this.restartPolling();
        }, 5000);
      } else {
        console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ polling - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...');
        setTimeout(() => {
          this.restartPolling();
        }, 15000);
      }
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
   */
  async handleStart(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const userData = this.chatManager.getUserData(userId);
    if (userData.chats.length === 0) {
      await this.chatManager.createChat(userId, '–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç');
    }
    
    const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç–∞–º –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö.

ü§ñ –Ø –∏—Å–ø–æ–ª—å–∑—É—é AI –º–æ–¥–µ–ª—å Qwen –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö, –∂–∏–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –±–µ–∑ "—Å–æ–ø–ª–µ–π" –∏ –ø—É—Å—Ç–æ–π —ç–º–ø–∞—Ç–∏–∏.

üë§ *–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
- –í—ã–±–æ—Ä –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
- 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ —Ä–µ—á–∏
- –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –¥–ª–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞

üìù –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /generate
2. –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–∑ —Å–æ—Ü—Å–µ—Ç–∏
4. –ü–æ–ª—É—á–∏—Ç–µ 4 —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/generate - –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
/models - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
/setmodel - –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å
/chats - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏
/newchat - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å API
/learning - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /generate –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏!`;

    await this.bot.sendMessage(chatId, welcomeMessage);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
   */
  async handleHelp(msg) {
    const chatId = msg.chat.id;
    const helpMessage = `üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
–ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç–∞–º –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö, –∏—Å–ø–æ–ª—å–∑—É—è AI –º–æ–¥–µ–ª—å Qwen.

üë§ *–õ–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:*
‚Ä¢ *–¢–∏–º—É—Ä* - –ú—É–∂—á–∏–Ω–∞ 38-45 –ª–µ—Ç, –≥–æ—Å—Å–µ–∫—Ç–æ—Ä/—Ç–µ—Ö/—é—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è
‚Ä¢ *–õ—é–±–æ–≤—å* - –î–µ–≤—É—à–∫–∞ 38-45 –ª–µ—Ç, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (—É—á–∏—Ç–µ–ª—å/–≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å)
‚Ä¢ *–°–æ—Ñ—å—è* - –î–µ–≤—É—à–∫–∞ 25-32 –≥–æ–¥–∞, —Å–∞–º–æ–∑–∞–Ω—è—Ç–∞—è –≤ beauty-—Å—Ñ–µ—Ä–µ
‚Ä¢ *–ì–∞–ª–∏–Ω–∞* - –î–µ–≤—É—à–∫–∞ 59-65 –ª–µ—Ç, –±—ã–≤—à–∏–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä/–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∫–∞
‚Ä¢ *–ü–∞–≤–µ–ª* - –ú—É–∂—á–∏–Ω–∞ 25-28 –ª–µ—Ç, –º–æ–ª–æ–¥–æ–π —Ä–∞–±–æ—á–∏–π —Å –∑–∞–≤–æ–¥–∞

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/generate - –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å API
/learning - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è

ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏:
/models - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
/setmodel - –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏:
/chats - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
/newchat - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
/selectchat - –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
/renamechat - –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —á–∞—Ç
/deletechat - –£–¥–∞–ª–∏—Ç—å —á–∞—Ç
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞

üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /generate
2. –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–∑ —Å–æ—Ü—Å–µ—Ç–∏
4. –ü–æ–ª—É—á–∏—Ç–µ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Å—Ç–∏–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏

‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —á–∞—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${config.chat.maxChatsPerUser}
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –¥–æ 60 —Å–µ–∫—É–Ω–¥

üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ API: FreeQwenApi (–ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏)
‚Ä¢ URL: ${config.qwen.apiUrl}`;

    await this.bot.sendMessage(chatId, helpMessage);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /generate
   */
  async handleGenerate(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ª–∏—á–Ω–æ—Å—Ç—è–º–∏ (–¥–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏)
    const timestamp = Date.now();
    const keyboard = {
      inline_keyboard: [
        [
          { text: '–¢–∏–º—É—Ä', callback_data: `personality_timur_${timestamp}` },
          { text: '–õ—é–±–æ–≤—å', callback_data: `personality_lyubov_${timestamp}` }
        ],
        [
          { text: '–°–æ—Ñ—å—è', callback_data: `personality_sofya_${timestamp}` },
          { text: '–ì–∞–ª–∏–Ω–∞', callback_data: `personality_galina_${timestamp}` }
        ],
        [
          { text: '–ü–∞–≤–µ–ª', callback_data: `personality_pavel_${timestamp}` }
        ]
      ]
    };
    
    const message = `üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:

*–¢–∏–º—É—Ä* - –ú—É–∂—á–∏–Ω–∞ 38-45 –ª–µ—Ç, –≥–æ—Å—Å–µ–∫—Ç–æ—Ä/—Ç–µ—Ö/—é—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è
*–õ—é–±–æ–≤—å* - –î–µ–≤—É—à–∫–∞ 38-45 –ª–µ—Ç, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (—É—á–∏—Ç–µ–ª—å/–≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å)
*–°–æ—Ñ—å—è* - –î–µ–≤—É—à–∫–∞ 25-32 –≥–æ–¥–∞, —Å–∞–º–æ–∑–∞–Ω—è—Ç–∞—è –≤ beauty-—Å—Ñ–µ—Ä–µ
*–ì–∞–ª–∏–Ω–∞* - –î–µ–≤—É—à–∫–∞ 59-65 –ª–µ—Ç, –±—ã–≤—à–∏–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä/–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∫–∞
*–ü–∞–≤–µ–ª* - –ú—É–∂—á–∏–Ω–∞ 25-28 –ª–µ—Ç, –º–æ–ª–æ–¥–æ–π —Ä–∞–±–æ—á–∏–π —Å –∑–∞–≤–æ–¥–∞

–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`;
    
    await this.bot.sendMessage(chatId, message, { 
      parse_mode: 'Markdown',
      reply_markup: keyboard 
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
   */
  async handleStatus(msg) {
    const chatId = msg.chat.id;
    
    await this.bot.sendMessage(chatId, 'üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å API...');
    
    const status = await this.qwenApi.checkStatus();
    
    if (status.success) {
      const statusMessage = `‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ

üìä –°—Ç–∞—Ç—É—Å: ${status.data.status || 'OK'}
üîó URL: ${config.qwen.apiUrl}
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: ${status.data.accounts?.length || 0}`;
      
      await this.bot.sendMessage(chatId, statusMessage);
    } else {
      const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API

üîó URL: ${config.qwen.apiUrl}
‚ö†Ô∏è –û—à–∏–±–∫–∞: ${status.error}

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FreeQwenApi –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.`;
      
      await this.bot.sendMessage(chatId, errorMessage);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /models
   */
  async handleModels(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    await this.bot.sendMessage(chatId, 'ü§ñ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...');
    
    try {
      const result = await this.qwenApi.getModels();
      
      if (result.success && result.data && result.data.models) {
        const currentModel = this.chatManager.getUserModel(userId);
        let message = `ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Qwen*\n\n`;
        
        result.data.models.forEach((model, index) => {
          const isCurrent = model === currentModel ? ' ‚úÖ' : '';
          message += `${index + 1}. \`${model}\`${isCurrent}\n`;
        });
        
        message += `\n–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: \`${currentModel}\``;
        message += `\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setmodel –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏`;
        
        await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      } else {
        const message = `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å API –∫–æ–º–∞–Ω–¥–æ–π /status`;
        
        await this.bot.sendMessage(chatId, message);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π:', error);
      
      const errorMessage = `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
      
      await this.bot.sendMessage(chatId, errorMessage);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setmodel
   */
  async handleSetModel(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
    this.userStates.set(userId, { state: 'waiting_for_model' });
    
    const message = `ü§ñ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.

–ü—Ä–∏–º–µ—Ä—ã: qwen-max-latest, qwen-plus, qwen-turbo

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /models –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.`;
    
    await this.bot.sendMessage(chatId, message);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chats
   */
  async handleChats(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
      const result = this.chatManager.getChats(userId);
      
      if (result.success && result.data.chats.length > 0) {
        let message = `üí¨ *–í–∞—à–∏ —á–∞—Ç—ã*\n\n`;
        
        result.data.chats.forEach((chat, index) => {
          const isActive = chat.id === result.data.activeChatId ? ' ‚úÖ' : '';
          const date = new Date(chat.createdAt).toLocaleDateString('ru-RU');
          message += `${index + 1}. \`${chat.name}\`${isActive}\n`;
          message += `   üìÖ ${date} | üí¨ ${chat.messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n`;
        });
        
        message += `–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç: \`${result.data.chats.find(c => c.id === result.data.activeChatId)?.name || '–ù–µ –≤—ã–±—Ä–∞–Ω'}\``;
        message += `\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /selectchat –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞`;
        
        await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      } else {
        const message = `üí¨ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newchat –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —á–∞—Ç–∞.`;
        
        await this.bot.sendMessage(chatId, message);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤:', error);
      
      const errorMessage = `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
      
      await this.bot.sendMessage(chatId, errorMessage);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newchat
   */
  async handleNewChat(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
    this.userStates.set(userId, { state: 'waiting_for_chat_name' });
    
    const message = `üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞.

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ${config.chat.maxChatNameLength} —Å–∏–º–≤–æ–ª–æ–≤`;
    
    await this.bot.sendMessage(chatId, message);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /selectchat
   */
  async handleSelectChat(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
      const result = this.chatManager.getChats(userId);
      
      if (result.success && result.data.chats.length > 0) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
        this.userStates.set(userId, { 
          state: 'waiting_for_chat_selection',
          data: { chats: result.data.chats }
        });
        
        let message = `üí¨ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n\n`;
        
        result.data.chats.forEach((chat, index) => {
          const isActive = chat.id === result.data.activeChatId ? ' ‚úÖ' : '';
          message += `${index + 1}. \`${chat.name}\`${isActive}\n`;
        });
        
        message += `\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —á–∞—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞.`;
        
        await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      } else {
        const message = `üí¨ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newchat –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —á–∞—Ç–∞.`;
        
        await this.bot.sendMessage(chatId, message);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞:', error);
      
      const errorMessage = `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
      
      await this.bot.sendMessage(chatId, errorMessage);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /renamechat
   */
  async handleRenameChat(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
      const result = this.chatManager.getChats(userId);
      
      if (result.success && result.data.chats.length > 0) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        this.userStates.set(userId, { 
          state: 'waiting_for_rename_chat_selection',
          data: { chats: result.data.chats }
        });
        
        let message = `‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:\n\n`;
        
        result.data.chats.forEach((chat, index) => {
          message += `${index + 1}. \`${chat.name}\`\n`;
        });
        
        message += `\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.`;
        
        await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      } else {
        const message = `üí¨ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newchat –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —á–∞—Ç–∞.`;
        
        await this.bot.sendMessage(chatId, message);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–∞:', error);
      
      const errorMessage = `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–∞.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
      
      await this.bot.sendMessage(chatId, errorMessage);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deletechat
   */
  async handleDeleteChat(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
      const result = this.chatManager.getChats(userId);
      
      if (result.success && result.data.chats.length > 0) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        this.userStates.set(userId, { 
          state: 'waiting_for_delete_chat_selection',
          data: { chats: result.data.chats }
        });
        
        let message = `üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n`;
        
        result.data.chats.forEach((chat, index) => {
          const isActive = chat.id === result.data.activeChatId ? ' (–∞–∫—Ç–∏–≤–Ω—ã–π)' : '';
          message += `${index + 1}. \`${chat.name}\`${isActive}\n`;
        });
        
        message += `\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —á–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.`;
        
        await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      } else {
        const message = `üí¨ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newchat –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —á–∞—Ç–∞.`;
        
        await this.bot.sendMessage(chatId, message);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞:', error);
      
      const errorMessage = `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
      
      await this.bot.sendMessage(chatId, errorMessage);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear
   */
  async handleClear(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
      const activeChat = this.chatManager.getActiveChat(userId);
      
      if (activeChat.success) {
        const result = await this.qwenApi.clearChat(activeChat.data.id);
        
        if (result.success) {
          const successMessage = `‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ "\`${activeChat.data.name}\`" –æ—á–∏—â–µ–Ω–∞!

–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –±–µ–∑ —É—á–µ—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.`;
          
          await this.bot.sendMessage(chatId, successMessage, { parse_mode: 'Markdown' });
        } else {
          const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏:

${result.error}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
          
          await this.bot.sendMessage(chatId, errorMessage);
        }
      } else {
        const errorMessage = `‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /selectchat –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞.`;
        
        await this.bot.sendMessage(chatId, errorMessage);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞:', error);
      
      const errorMessage = `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
      
      await this.bot.sendMessage(chatId, errorMessage);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async handleMessage(msg) {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      const text = msg.text;

      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (text.startsWith('/')) {
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userState = this.userStates.get(userId);
      
      if (userState) {
        await this.handleUserState(chatId, userId, text, userState);
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã /generate
        await this.processTextForComments(chatId, text, userId);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      try {
        await this.bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      } catch (sendError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError);
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
   */
  async handleCallbackQuery(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
    await this.bot.answerCallbackQuery(callbackQuery.id);
    
    if (data.startsWith('personality_')) {
      await this.handlePersonalitySelection(callbackQuery);
    } else if (data.startsWith('select_comment_')) {
      await this.handleCommentSelection(callbackQuery);
    } else if (data.startsWith('rate_')) {
      await this.handleCommentRating(callbackQuery);
    } else if (data.startsWith('improve_')) {
      await this.handleCommentImprovement(callbackQuery);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏
   */
  async handlePersonalitySelection(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ª–∏—á–Ω–æ—Å—Ç–∏ –∏–∑ callback_data (—É–±–∏—Ä–∞–µ–º timestamp)
    const personality = data.split('_')[1]; // –ë–µ—Ä–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ _
    const personalityConfig = config.personalities[personality];
    
    if (personalityConfig) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.userStates.set(userId, { 
        state: 'waiting_for_text',
        personality: personality,
        personalityConfig: personalityConfig
      });
      
      const message = `‚úÖ –í—ã–±—Ä–∞–Ω–∞ –ª–∏—á–Ω–æ—Å—Ç—å: *${personalityConfig.name}*

${personalityConfig.description}
*–°—Ç–∏–ª—å:* ${personalityConfig.style}

–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`;
      
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.bot.editMessageText(message, {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id,
          parse_mode: 'Markdown'
        });
      } catch (error) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å),
        // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (error.code === 'ETELEGRAM' && error.response?.body?.description?.includes('message is not modified')) {
          await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        } else {
          // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
          await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        }
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏
   */
  async handleCommentSelection(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const commentIndex = parseInt(data.split('_')[2]);
    const timestamp = data.split('_')[3];
    
    const userState = this.userStates.get(userId);
    if (!userState || !userState.context) {
      await this.bot.sendMessage(chatId, '‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞–Ω–æ–≤–æ.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    const comments = userState.context.generatedComments.split('\n\n');
    const selectedComment = comments[commentIndex];
    
    if (!selectedComment) {
      await this.bot.sendMessage(chatId, '‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    this.userStates.set(userId, {
      ...userState,
      selectedCommentIndex: commentIndex,
      selectedComment: selectedComment
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    const keyboard = this.createRatingKeyboard(userState.commentId, timestamp);
    
    const message = `üí¨ *–í—ã–±—Ä–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏:*

${selectedComment}

‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–î–æ–∫—Ä—É—Ç–∏—Ç—å" –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏.`;
    
    try {
      await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
      await this.bot.sendMessage(chatId, message, { 
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
   */
  async handleCommentRating(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏ ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const rating = parseInt(data.split('_')[1]);
    const commentId = data.split('_')[2];
    
    const userState = this.userStates.get(userId);
    if (!userState || !userState.context) {
      await this.bot.sendMessage(chatId, '‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
    const result = await this.learningManager.saveCommentRating(
      userId, 
      commentId, 
      rating, 
      userState.context
    );
    
    if (result.success) {
      const message = `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: ${'‚≠ê'.repeat(rating)}

–í–∞—à–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`;
      
      try {
        await this.bot.editMessageText(message, {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id,
          parse_mode: 'Markdown'
        });
      } catch (error) {
        await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      }
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.userStates.delete(userId);
    } else {
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
   */
  async handleCommentImprovement(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    
    const userState = this.userStates.get(userId);
    console.log('DEBUG: handleCommentImprovement - userId:', userId);
    console.log('DEBUG: handleCommentImprovement - userState:', userState);
    
    if (!userState || !userState.context) {
      console.log('DEBUG: –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è userId:', userId);
      console.log('DEBUG: –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', Array.from(this.userStates.entries()));
      await this.bot.sendMessage(chatId, '‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞–Ω–æ–≤–æ.');
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    this.userStates.set(userId, {
      ...userState,
      state: 'waiting_for_improvement_feedback'
    });
    
    const message = `üîß *–ö–∞–∫ –º–æ–∂–µ–º —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç?*

–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–°–¥–µ–ª–∞–π –∑–∞—Ö–æ–¥ —Å –ø–æ–∑–∏—Ü–∏–∏ –∂–∏—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–¥–∞–≤–Ω–æ –ø–µ—Ä–µ–µ—Ö–∞–ª"
‚Ä¢ "–°–¥–µ–ª–∞–π –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–º"
‚Ä¢ "–î–æ–±–∞–≤—å –±–æ–ª—å—à–µ —Ñ–∞–∫—Ç–æ–≤"
‚Ä¢ "–ò–∑–º–µ–Ω–∏ —Ç–æ–Ω –Ω–∞ –±–æ–ª–µ–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π"
‚Ä¢ "–£–±–µ—Ä–∏ –ª–∏—à–Ω–∏–µ –¥–µ—Ç–∞–ª–∏"

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:`;
    
    try {
      await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown'
      });
    } catch (error) {
      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /learning
   */
  async handleLearning(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const stats = this.learningManager.getUserFeedbackStats(userId);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const trainingData = this.learningManager.getTrainingData();
      
      const message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è*

üë§ *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: ${stats.totalFeedback}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${stats.averageRating}‚≠ê
‚Ä¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏: ${stats.improvementFeedback}

üìà *–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω–æ–∫:*
‚Ä¢ ‚≠ê (1): ${stats.ratings[1]}
‚Ä¢ ‚≠ê‚≠ê (2): ${stats.ratings[2]}
‚Ä¢ ‚≠ê‚≠ê‚≠ê (3): ${stats.ratings[3]}
‚Ä¢ ‚≠ê‚≠ê‚≠ê‚≠ê (4): ${stats.ratings[4]}
‚Ä¢ ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (5): ${stats.ratings[5]}

üåê *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:*
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: ${trainingData.totalFeedback}
‚Ä¢ –û—Ü–µ–Ω–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${trainingData.ratings.length}
‚Ä¢ –û–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏: ${trainingData.improvements.length}

üí° *–ö–∞–∫ —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç:*
–í–∞—à–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ß–µ–º –±–æ–ª—å—à–µ –æ—Ü–µ–Ω–æ–∫, —Ç–µ–º –ª—É—á—à–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!`;
      
      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è:', error);
      await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
   */
  async handleImprovementFeedback(chatId, userId, text, userState) {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏
      const processingMessage = await this.bot.sendMessage(chatId, 'üîß –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏
      const comments = userState.context.generatedComments.split('\n\n');
      
      // –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      const improvedComments = [];
      
      for (let i = 0; i < comments.length; i++) {
        const originalComment = comments[i];
        
        // –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        const result = await this.qwenApi.improveComment(
          originalComment,
          text,
          userState.context.originalText,
          userState.context.personality,
          userState.context.personalityConfig,
          userState.context.chatId,
          userState.context.model
        );
        
        if (result.success) {
          improvedComments.push(result.data);
        } else {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
          improvedComments.push(originalComment);
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
      await this.learningManager.saveImprovementFeedback(
        userId,
        userState.commentId,
        text,
        userState.context
      );
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const improvedText = improvedComments.join('\n\n');
      const response = `üîß *–î–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏*

*–í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:*
${text}

*–î–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:*

${improvedText}

---
ü§ñ –î–æ—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Qwen AI`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      try {
        await this.bot.editMessageText(response, {
          chat_id: chatId,
          message_id: processingMessage.message_id,
          parse_mode: 'Markdown'
        });
      } catch (editError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', editError.message);
        await this.bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
      }
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.userStates.delete(userId);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:', error);
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      this.userStates.delete(userId);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async handleUserState(chatId, userId, text, userState) {
    switch (userState.state) {
      case 'waiting_for_text':
        await this.processTextForComments(chatId, text, userId);
        // –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫
        break;
        
      case 'waiting_for_model':
        await this.handleModelSelection(chatId, userId, text);
        break;
        
      case 'waiting_for_chat_name':
        await this.handleChatNameInput(chatId, userId, text);
        break;
        
      case 'waiting_for_chat_selection':
        await this.handleChatSelection(chatId, userId, text, userState.data.chats);
        break;
        
      case 'waiting_for_rename_chat_selection':
        await this.handleRenameChatSelection(chatId, userId, text, userState.data.chats);
        break;
        
      case 'waiting_for_delete_chat_selection':
        await this.handleDeleteChatSelection(chatId, userId, text, userState.data.chats);
        break;
        
      case 'waiting_for_new_chat_name':
        await this.handleNewChatNameInput(chatId, userId, text);
        break;
        
      case 'waiting_for_improvement_feedback':
        await this.handleImprovementFeedback(chatId, userId, text, userState);
        break;
        
      default:
        this.userStates.delete(userId);
        await this.bot.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
   */
  async handleModelSelection(chatId, userId, text) {
    try {
      const result = await this.chatManager.setUserModel(userId, text);
      
      if (result.success) {
        const successMessage = `‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ \`${text}\``;
        await this.bot.sendMessage(chatId, successMessage, { parse_mode: 'Markdown' });
      } else {
        const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏:

${result.error}`;
        await this.bot.sendMessage(chatId, errorMessage);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏:', error);
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏.');
    }
    
    this.userStates.delete(userId);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
   */
  async handleChatNameInput(chatId, userId, text) {
    try {
      const result = await this.chatManager.createChat(userId, text);
      
      if (result.success) {
        const successMessage = `‚úÖ –ß–∞—Ç "\`${text}\`" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`;
        await this.bot.sendMessage(chatId, successMessage, { parse_mode: 'Markdown' });
      } else {
        const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞:

${result.error}`;
        await this.bot.sendMessage(chatId, errorMessage);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞:', error);
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞.');
    }
    
    this.userStates.delete(userId);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
   */
  async handleChatSelection(chatId, userId, text, chats) {
    try {
      const chatIndex = parseInt(text) - 1;
      
      if (chatIndex >= 0 && chatIndex < chats.length) {
        const selectedChat = chats[chatIndex];
        const result = await this.chatManager.selectChat(userId, selectedChat.id);
        
        if (result.success) {
          const successMessage = `‚úÖ –í—ã–±—Ä–∞–Ω —á–∞—Ç "\`${selectedChat.name}\`"`;
          await this.bot.sendMessage(chatId, successMessage, { parse_mode: 'Markdown' });
        } else {
          const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞:

${result.error}`;
          await this.bot.sendMessage(chatId, errorMessage);
        }
      } else {
        await this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        return; // –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞:', error);
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞.');
    }
    
    this.userStates.delete(userId);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
   */
  async handleRenameChatSelection(chatId, userId, text, chats) {
    try {
      const chatIndex = parseInt(text) - 1;
      
      if (chatIndex >= 0 && chatIndex < chats.length) {
        const selectedChat = chats[chatIndex];
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        this.userStates.set(userId, { 
          state: 'waiting_for_new_chat_name',
          data: { chatId: selectedChat.id, oldName: selectedChat.name }
        });
        
        const message = `‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ "\`${selectedChat.name}\`":

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ${config.chat.maxChatNameLength} —Å–∏–º–≤–æ–ª–æ–≤`;
        
        await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        return; // –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      } else {
        await this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        return; // –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:', error);
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞.');
    }
    
    this.userStates.delete(userId);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
   */
  async handleNewChatNameInput(chatId, userId, text) {
    try {
      const userState = this.userStates.get(userId);
      const result = await this.chatManager.renameChat(userId, userState.data.chatId, text);
      
      if (result.success) {
        const successMessage = `‚úÖ –ß–∞—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω —Å "\`${userState.data.oldName}\`" –Ω–∞ "\`${text}\`"`;
        await this.bot.sendMessage(chatId, successMessage, { parse_mode: 'Markdown' });
      } else {
        const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–∞:

${result.error}`;
        await this.bot.sendMessage(chatId, errorMessage);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–∞:', error);
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–∞.');
    }
    
    this.userStates.delete(userId);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   */
  async handleDeleteChatSelection(chatId, userId, text, chats) {
    try {
      const chatIndex = parseInt(text) - 1;
      
      if (chatIndex >= 0 && chatIndex < chats.length) {
        const selectedChat = chats[chatIndex];
        const result = await this.chatManager.deleteChat(userId, selectedChat.id);
        
        if (result.success) {
          const successMessage = `‚úÖ –ß–∞—Ç "\`${selectedChat.name}\`" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`;
          await this.bot.sendMessage(chatId, successMessage, { parse_mode: 'Markdown' });
        } else {
          const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞:

${result.error}`;
          await this.bot.sendMessage(chatId, errorMessage);
        }
      } else {
        await this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        return; // –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞:', error);
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞.');
    }
    
    this.userStates.delete(userId);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
   */
  async processTextForComments(chatId, text, userId) {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏
    const userState = this.userStates.get(userId);
    const selectedPersonality = userState?.personality || null;
    const personalityConfig = userState?.personalityConfig || null;

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –∏ –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activeChat = this.chatManager.getActiveChat(userId);
    const userModel = this.chatManager.getUserModel(userId);
    
    if (!activeChat.success) {
      const errorMessage = `‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /selectchat –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –∏–ª–∏ /newchat –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.`;
      
      await this.bot.sendMessage(chatId, errorMessage);
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const processingMessage = await this.bot.sendMessage(chatId, 'ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.');

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      const result = await this.qwenApi.generateComments(text, userId, userModel, activeChat.data.id, null, selectedPersonality, personalityConfig);
      
      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
        await this.chatManager.updateChatStats(userId, activeChat.data.id);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const response = this.formatCommentsResponse(text, result.data, personalityConfig?.name);
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        const commentId = `comment_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const timestamp = Date.now();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        const context = {
          originalText: text,
          personality: selectedPersonality,
          personalityConfig: personalityConfig,
          model: userModel,
          chatId: activeChat.data.id,
          generatedComments: result.data,
          timestamp: new Date().toISOString()
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUserState = {
          ...userState,
          context: context,
          commentId: commentId,
          timestamp: timestamp
        };
        
        this.userStates.set(userId, newUserState);
        console.log('DEBUG: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è userId:', userId);
        console.log('DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', newUserState);
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        const keyboard = this.createCommentSelectionKeyboard(result.data.split('\n\n'), timestamp);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try {
          await this.bot.editMessageText(response, {
            chat_id: chatId,
            message_id: processingMessage.message_id,
            parse_mode: 'Markdown',
            reply_markup: keyboard
          });
        } catch (editError) {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', editError.message);
          await this.bot.sendMessage(chatId, response, { 
            parse_mode: 'Markdown',
            reply_markup: keyboard
          });
        }
      } else {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–æ–≤–µ—Ç
        let errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:\n\n${result.error}\n\n`;
        
        if (result.error.includes('500') || result.error.includes('–±—Ä–∞—É–∑–µ—Ä')) {
          errorMessage += 'üîÑ –ü—Ä–æ–±–ª–µ–º–∞ —Å API —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.';
        } else if (result.error.includes('ECONNREFUSED') || result.error.includes('—Å–µ—Ç—å')) {
          errorMessage += 'üîå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ FreeQwenApi –∑–∞–ø—É—â–µ–Ω.';
        } else if (result.error.includes('—Ç–æ–∫–µ–Ω') || result.error.includes('–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')) {
          errorMessage += 'üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å API –∫–æ–º–∞–Ω–¥–æ–π /status';
        } else {
          errorMessage += '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å API –∫–æ–º–∞–Ω–¥–æ–π /status';
        }
        
        try {
          await this.bot.editMessageText(errorMessage, {
            chat_id: chatId,
            message_id: processingMessage.message_id
          });
        } catch (editError) {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', editError.message);
          await this.bot.sendMessage(chatId, errorMessage);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
      
      const errorMessage = `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
      
      try {
        await this.bot.editMessageText(errorMessage, {
          chat_id: chatId,
          message_id: processingMessage.message_id
        });
      } catch (editError) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', editError.message);
        await this.bot.sendMessage(chatId, errorMessage);
      }
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
   */
  formatCommentsResponse(originalText, aiResponse, personalityName = null) {
    // –û–±—Ä–µ–∑–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    const truncatedText = originalText.length > 300 
      ? originalText.substring(0, 300) + '...' 
      : originalText;
    
    const personalityInfo = personalityName ? `\nüë§ *–õ–∏—á–Ω–æ—Å—Ç—å:* ${personalityName}` : '';
    
    return `üìù *–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:*
"${truncatedText}"${personalityInfo}

üí¨ *–í–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:*

${aiResponse}

---
ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Qwen AI`;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
   */
  createRatingKeyboard(commentId, timestamp) {
    return {
      inline_keyboard: [
        [
          { text: '‚≠ê –û—Ü–µ–Ω–∏—Ç—å 1', callback_data: `rate_1_${commentId}_${timestamp}` },
          { text: '‚≠ê‚≠ê –û—Ü–µ–Ω–∏—Ç—å 2', callback_data: `rate_2_${commentId}_${timestamp}` },
          { text: '‚≠ê‚≠ê‚≠ê –û—Ü–µ–Ω–∏—Ç—å 3', callback_data: `rate_3_${commentId}_${timestamp}` }
        ],
        [
          { text: '‚≠ê‚≠ê‚≠ê‚≠ê –û—Ü–µ–Ω–∏—Ç—å 4', callback_data: `rate_4_${commentId}_${timestamp}` },
          { text: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –û—Ü–µ–Ω–∏—Ç—å 5', callback_data: `rate_5_${commentId}_${timestamp}` }
        ],
        [
          { text: 'üîß –î–æ–∫—Ä—É—Ç–∏—Ç—å', callback_data: `improve_${commentId}_${timestamp}` }
        ]
      ]
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏
   */
  createCommentSelectionKeyboard(comments, timestamp) {
    const keyboard = {
      inline_keyboard: []
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    for (let i = 0; i < Math.min(comments.length, 4); i++) {
      keyboard.inline_keyboard.push([
        { text: `üí¨ –û—Ü–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ${i + 1}`, callback_data: `select_comment_${i}_${timestamp}` }
      ]);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–∫—Ä—É—Ç–∏—Ç—å"
    keyboard.inline_keyboard.push([
      { text: 'üîß –î–æ–∫—Ä—É—Ç–∏—Ç—å', callback_data: `improve_${timestamp}` }
    ]);

    return keyboard;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   * 
   * @method start
   * @description –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
   * –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç graceful shutdown
   * 
   * @example
   * const bot = new TelegramBotHandler();
   * bot.start();
   */
  start() {
    console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    console.log(`üîó API URL: ${config.qwen.apiUrl}`);
    console.log(`ü§ñ –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${config.telegram.defaultModel}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è graceful shutdown
    process.on('SIGINT', () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...');
      this.stop();
      process.exit(0);
    });
    
    process.on('SIGTERM', () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...');
      this.stop();
      process.exit(0);
    });
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling
   */
  async restartPolling() {
    try {
      console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling...');
      await this.bot.stopPolling();
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      await this.bot.startPolling();
      console.log('‚úÖ Polling —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ polling:', error);
      
      // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        this.restartPolling();
      }, 30000);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   */
  stop() {
    this.bot.stopPolling();
    console.log('ü§ñ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

module.exports = TelegramBotHandler;
