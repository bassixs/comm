const { spawn } = require('child_process');
const path = require('path');

class BotMonitor {
  constructor() {
    this.botProcess = null;
    this.restartCount = 0;
    this.maxRestarts = 10;
    this.restartDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥
  }

  start() {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ –±–æ—Ç–∞...');
    this.spawnBot();
  }

  spawnBot() {
    console.log(`üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${this.restartCount + 1}/${this.maxRestarts})...`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
    this.botProcess = spawn('node', ['index.js'], {
      stdio: 'inherit',
      cwd: __dirname
    });

    this.botProcess.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
      this.handleRestart();
    });

    this.botProcess.on('exit', (code, signal) => {
      console.log(`üì§ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code} –∏ —Å–∏–≥–Ω–∞–ª–æ–º ${signal}`);
      
      if (code !== 0 && this.restartCount < this.maxRestarts) {
        this.handleRestart();
      } else if (this.restartCount >= this.maxRestarts) {
        console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞.');
        process.exit(1);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    process.on('SIGINT', () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä...');
      this.stop();
    });

    process.on('SIGTERM', () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä...');
      this.stop();
    });
  }

  handleRestart() {
    this.restartCount++;
    
    if (this.restartCount <= this.maxRestarts) {
      console.log(`‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ ${this.restartDelay / 1000} —Å–µ–∫—É–Ω–¥...`);
      
      setTimeout(() => {
        this.spawnBot();
      }, this.restartDelay);
    } else {
      console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞.');
      process.exit(1);
    }
  }

  stop() {
    if (this.botProcess) {
      this.botProcess.kill('SIGTERM');
    }
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
const monitor = new BotMonitor();
monitor.start();
