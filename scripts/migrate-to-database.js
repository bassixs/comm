const fs = require('fs').promises;
const path = require('path');
const DatabaseManager = require('../bot/managers/databaseManager');
const Utils = require('../bot/utils/utils');

/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
async function migrateToDatabase() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
  
  const dbManager = new DatabaseManager();
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const dbInitialized = await dbManager.init();
    
    if (!dbInitialized) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤
    await migrateChats(dbManager);
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    await migrateFeedback(dbManager);
    
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = dbManager.getDatabaseStats();
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.users}`);
    console.log(`üí¨ –ß–∞—Ç–æ–≤: ${stats.chats}`);
    console.log(`‚≠ê –û–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: ${stats.feedback}`);
    console.log(`üíæ –†–∞–∑–º–µ—Ä –ë–î: ${stats.dbSizeMB} –ú–ë`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    dbManager.close();
  }
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
 */
async function migrateChats(dbManager) {
  console.log('\nüìÅ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤...');
  
  try {
    const chatsFile = path.join(__dirname, '..', 'bot', 'data', 'chats', 'user-chats.json');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    try {
      await fs.access(chatsFile);
    } catch {
      console.log('‚ÑπÔ∏è –§–∞–π–ª —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —á–∞—Ç–æ–≤');
      return;
    }
    
    const chatsData = await fs.readFile(chatsFile, 'utf8');
    const userChats = JSON.parse(chatsData);
    
    let migratedUsers = 0;
    let migratedChats = 0;
    
    for (const [telegramId, userData] of Object.entries(userChats)) {
      try {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = dbManager.getUserOrCreate(parseInt(telegramId));
        migratedUsers++;
        
        // –ú–∏–≥—Ä–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userData.chats && Array.isArray(userData.chats)) {
          for (const chat of userData.chats) {
            try {
              const result = dbManager.createChat(user.id, chat.name, chat.model || 'qwen-max-latest');
              if (result.success) {
                migratedChats++;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
                if (chat.messageCount > 0) {
                  dbManager.db.prepare(`
                    UPDATE chats 
                    SET message_count = ?, updated_at = ? 
                    WHERE id = ?
                  `).run(chat.messageCount, chat.lastUsed || chat.updatedAt, result.data.id);
                }
              }
            } catch (chatError) {
              console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞ ${chat.id}:`, chatError.message);
            }
          }
        }
      } catch (userError) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}:`, userError.message);
      }
    }
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${migratedUsers}`);
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–∞—Ç–æ–≤: ${migratedChats}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —á–∞—Ç–æ–≤:', error);
  }
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
 */
async function migrateFeedback(dbManager) {
  console.log('\nüìÅ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...');
  
  try {
    const feedbackFile = path.join(__dirname, '..', 'bot', 'data', 'learning', 'feedback.json');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    try {
      await fs.access(feedbackFile);
    } catch {
      console.log('‚ÑπÔ∏è –§–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é');
      return;
    }
    
    const feedbackData = await fs.readFile(feedbackFile, 'utf8');
    const userFeedback = JSON.parse(feedbackData);
    
    let migratedFeedback = 0;
    
    for (const [telegramId, feedbackList] of Object.entries(userFeedback)) {
      try {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = dbManager.getUserOrCreate(parseInt(telegramId));
        
        // –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        if (Array.isArray(feedbackList)) {
          for (const feedback of feedbackList) {
            try {
              const result = dbManager.saveFeedback(
                user.id,
                feedback.commentId,
                feedback.rating,
                feedback.feedback,
                feedback.type,
                feedback.context
              );
              
              if (result.success) {
                migratedFeedback++;
              }
            } catch (feedbackError) {
              console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ${feedback.id}:`, feedbackError.message);
            }
          }
        }
      } catch (userError) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}:`, userError.message);
      }
    }
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: ${migratedFeedback}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:', error);
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ JSON —Ñ–∞–π–ª–æ–≤
 */
async function createBackup() {
  console.log('\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ JSON —Ñ–∞–π–ª–æ–≤...');
  
  try {
    const backupDir = path.join(__dirname, '..', 'backup', new Date().toISOString().split('T')[0]);
    await fs.mkdir(backupDir, { recursive: true });
    
    const filesToBackup = [
      '../bot/data/chats/user-chats.json',
      '../bot/data/chats/user-settings.json',
      '../bot/data/learning/feedback.json'
    ];
    
    for (const filePath of filesToBackup) {
      try {
        const sourcePath = path.join(__dirname, filePath);
        const fileName = path.basename(filePath);
        const backupPath = path.join(backupDir, fileName);
        
        await fs.copyFile(sourcePath, backupPath);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${fileName}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é ${filePath}:`, error.message);
      }
    }
    
    console.log(`üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ${backupDir}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  (async () => {
    console.log('üóÑÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite');
    console.log('=====================================\n');
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    await createBackup();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    await migrateToDatabase();
    
    console.log('\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ JSON —Ñ–∞–π–ª–æ–≤.');
  })();
}

module.exports = { migrateToDatabase, createBackup };
